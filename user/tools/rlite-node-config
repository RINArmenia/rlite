#!/usr/bin/env python

import subprocess
import argparse
import time
import sys
import re
import os
import errno


# Clean up a string or bytearray that comes from process output
def strclean(s):
    s = str(s)
    s = s.replace("\\n", "\n")
    if s.startswith("b\'") or s.startswith("b\""):
        s = s[2:]
        if s[-1] in ["\'", "\""]:
            s = s[:-1]
    if len(s) > 0 and s[-1] == '\n':
        s = s[:-1]
    return s

def daemonize():
    while 1:
        try:
            pid = os.fork()
            if pid > 0:
                # Exit parent
                sys.exit(0)
            # Go ahead with the child
            break
        except OSError as e:
            if e.errno != errno.EAGAIN:
                printf("Fork failed: %d (%s)\n" % (e.errno, e.strerror))
                quit()
                sys.exit(1)
            # Temporary failure. Wait and retry.
            time.sleep(2)

    # Decouple from parent environment
    os.chdir("/")
    os.setsid()

def process_retry(fun, params):
    while 1:
        try:
            return fun(params, stderr = subprocess.STDOUT)
        except OSError as e:
            if e.errno != errno.EAGAIN:
                # Propagate the exception to the caller
                raise
            # Temporary lack of resources, let's wait a bit and retry
            time.sleep(3)

def process_call_retry(params):
    process_retry(subprocess.check_call, params)

def process_output_retry(params):
    return process_retry(subprocess.check_output, params)


description = "Simple configuration tool for rlite"
epilog = "2017 Vincenzo Maffione <v.maffione@gmail.com>"

argparser = argparse.ArgumentParser(description = description,
                                    epilog = epilog)
argparser.add_argument('-s', '--script',
                       help = "Path of the script file to be run",
                       type = str, default = '/etc/rina/initscript')
argparser.add_argument('--no-reset', dest = 'reset', action = 'store_false',
                       help = "Don't issue reset command at startup")
argparser.add_argument('-d', '--daemon', action = 'store_true',
                       help = "Run in daemon mode")
argparser.add_argument('-v', '--verbose',
                       help = "Be verbose",
                       action = 'store_true')
argparser.add_argument('-o', '--once', action = 'store_true',
                       help = "Terminate after successfully executing the"
                       " initscript")
argparser.add_argument('--one-shot',
                       help = "Terminate as soon as the configuration completes",
                       action = 'store_true')

args = argparser.parse_args()

configured = False
daemonized = False

try:
    process_call_retry(['modprobe', 'rlite'])
    process_call_retry(['modprobe', 'rlite-normal'])
    process_call_retry(['modprobe', 'rlite-shim-eth'])
    process_call_retry(['modprobe', 'rlite-shim-udp4'])
except Exception as ee:
    print("Error: failed to modprobe rlite modules")
    quit()

while True:
    # Check if rlite-uipcps it still there.
    try:
        o = process_output_retry(['rlite-ctl', 'probe'])
    except Exception as e:
        # Not there, we need to respawn it and force reconfiguration.
        print("Could not probe rlite-uipcps daemon, spawning ...")
        try:
            process_retry(subprocess.call, ['pkill', 'rlite-uipcps'])
            configured = False
            process_call_retry(['rlite-uipcps', '-d'])
        except Exception as ee:
            print("Error: Failed to start rlite-uipcps [%s]" % ee.strerror)
            quit()
        # Probe again to make sure the daemon is up and running.
        continue

    # The daemon is up and running. If it's not already configured
    # we can go ahead and execute the initscript. Otherwise we wait
    # for a while and probe again (unless we are in one-shot mode,
    # where we simply quit).
    if configured:
        if args.one_shot:
            quit()
        time.sleep(10)
        continue

    print(">>> Running initscript ...")

    try:
        fin = open(args.script, "r")
    except:
        print("Failed to open script file %s" % args.script)
        quit()

    cmds = []
    if args.reset:
        cmds.append((0, ['reset'])) # reset to remove all the IPCPs
    args.reset = True  # --no-reset has effect only for the first time
    enrolls = []

    linecnt = 0
    while 1:
        line = fin.readline()
        if line == "":
            break
        linecnt += 1

        line = line.replace('\n', '').strip()
        if line.startswith("#") or line == "":
            continue

        splitted = line.split()
        if splitted[0] == 'ipcp-enroll' or splitted[0] == 'ipcp-lower-flow-alloc':
            enrolls.append((linecnt, splitted))
        else:
            cmds.append((linecnt, splitted))

    fin.close()

    for cmd in cmds:
        cmdargs = ['rlite-ctl'] + cmd[1]
        try:
            o = process_output_retry(cmdargs)
        except Exception as e:
            o = strclean(e.output)
            print("Failure at %s:%s --> %s" % (args.script, cmd[0], o))
            quit()
        o = strclean(o)
        if args.verbose:
            print('executed %s' % ' '.join(cmdargs))
            if len(o) > 0:
                print(o)

    sys.stdout.flush()

    if args.daemon and not daemonized:
        daemonize()
        daemonized = True

    i = 1
    n = len(enrolls)
    for cmd in enrolls:
        cmdargs = ['rlite-ctl'] + cmd[1]
        while 1:
            try:
                o = process_output_retry(cmdargs)
                break
            except Exception as e:
                o = strclean(e.output)
                print("Enrollment at %s:%s failed (%d/%d) --> %s" % (args.script, cmd[0], i, n, o))
                sys.stdout.flush()
                time.sleep(3)
        o = strclean(o)
        if args.verbose and len(o) > 0:
            print('executed %s' % ' '.join(cmdargs))
            if len(o) > 0:
                print(o)

        print('Enrollment %d/%d successfully completed' % (i, n))
        sys.stdout.flush()
        i += 1

    # Configuration is complete.
    configured = True
    print(">>> Initscript completed.")
    if args.once:
        break
